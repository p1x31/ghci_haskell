Intial thought was to use Data.List.permutations
in let n = 10 in map f (permutations [1..n]) 
as let n = 10 in map f (Data.List.permutations [1..n])
after loading first.hs to see the result of 1..5 permutations which is 120.
As suggested in a hint for the permutation function itself to use
length (map length xss).

where z is an element to insert
and y is a postion to insert
(take (length xs)) : length of every single list as a position to insert

f z xs = map (insert at x) (take (length xs) [0,1..])
(\y -> insert z y xs)
y returns all possible ways of inserting a new element into a list, and permutions returns all permutations of a list, which are given by all possible reordeings
permutations :: [a] -> [[a]]
permutations [] = [[]]
permutations (x:xs) = concat (map (insert x) (permutations xs))
